AWSTemplateFormatVersion: 2010-09-09
Description: Amazon ECS infrastructure for manual-scaler-app web-front-end

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: oam-ecs-manual-scaler-app-web-front-end

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: oam-ecs-manual-scaler-app-web-front-end
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 4.00 vcpu
      Memory: '10240'
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: server
          Image: nginx:latest
          PortMappings:
            - ContainerPort: 9001
              Protocol:  tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: oam-ecs

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: oam-ecs-manual-scaler-app-web-front-end-ContainerSecurityGroup
      VpcId:
        Fn::ImportValue: oam-ecs-VpcId

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: oam-ecs-ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 5
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            Fn::Split:
              - ','
              - Fn::ImportValue: oam-ecs-PrivateSubnets
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: server
          ContainerPort: 9001
          TargetGroupArn: !Ref TargetGroupServer9001
      HealthCheckGracePeriodSeconds: 0
    DependsOn:
      - LBListenerServer9001



  SGLoadBalancerToContainers:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from anywhere on the internet through the public NLB
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      Subnets:
        Fn::Split:
          - ','
          - Fn::ImportValue: oam-ecs-PublicSubnets

  LBListenerServer9001:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupServer9001
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 9001
      Protocol:  TCP

  TargetGroupServer9001:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol:  TCP
      TargetType: ip
      Port: 9001
      VpcId:
        Fn::ImportValue: oam-ecs-VpcId
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '30'



Outputs:
  CloudFormationStackConsole:
    Description: The AWS console deep-link for the CloudFormation stack
    Value: !Sub https://console.aws.amazon.com/cloudformation/home?region=${AWS::Region}#/stacks/stackinfo?stackId=${AWS::StackName}

  ECSServiceConsole:
    Description: The AWS console deep-link for the ECS service
    Value: !Sub https://console.aws.amazon.com/ecs/home?region=${AWS::Region}#/clusters/oam-ecs/services/${Service.Name}

  ServerPort9001Endpoint:
    Description: The endpoint for container Server on port 9001
    Value: !Sub '${PublicLoadBalancer.DNSName}:9001'

