// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/term/progress/spinner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockstartStopper is a mock of startStopper interface
type MockstartStopper struct {
	ctrl     *gomock.Controller
	recorder *MockstartStopperMockRecorder
}

// MockstartStopperMockRecorder is the mock recorder for MockstartStopper
type MockstartStopperMockRecorder struct {
	mock *MockstartStopper
}

// NewMockstartStopper creates a new mock instance
func NewMockstartStopper(ctrl *gomock.Controller) *MockstartStopper {
	mock := &MockstartStopper{ctrl: ctrl}
	mock.recorder = &MockstartStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstartStopper) EXPECT() *MockstartStopperMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockstartStopper) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockstartStopperMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockstartStopper)(nil).Start))
}

// Stop mocks base method
func (m *MockstartStopper) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockstartStopperMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockstartStopper)(nil).Stop))
}

// Mockmover is a mock of mover interface
type Mockmover struct {
	ctrl     *gomock.Controller
	recorder *MockmoverMockRecorder
}

// MockmoverMockRecorder is the mock recorder for Mockmover
type MockmoverMockRecorder struct {
	mock *Mockmover
}

// NewMockmover creates a new mock instance
func NewMockmover(ctrl *gomock.Controller) *Mockmover {
	mock := &Mockmover{ctrl: ctrl}
	mock.recorder = &MockmoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockmover) EXPECT() *MockmoverMockRecorder {
	return m.recorder
}

// Up mocks base method
func (m *Mockmover) Up(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Up", n)
}

// Up indicates an expected call of Up
func (mr *MockmoverMockRecorder) Up(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*Mockmover)(nil).Up), n)
}

// Down mocks base method
func (m *Mockmover) Down(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Down", n)
}

// Down indicates an expected call of Down
func (mr *MockmoverMockRecorder) Down(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Down", reflect.TypeOf((*Mockmover)(nil).Down), n)
}

// EraseLine mocks base method
func (m *Mockmover) EraseLine() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EraseLine")
}

// EraseLine indicates an expected call of EraseLine
func (mr *MockmoverMockRecorder) EraseLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EraseLine", reflect.TypeOf((*Mockmover)(nil).EraseLine))
}

// MockwriteFlusher is a mock of writeFlusher interface
type MockwriteFlusher struct {
	ctrl     *gomock.Controller
	recorder *MockwriteFlusherMockRecorder
}

// MockwriteFlusherMockRecorder is the mock recorder for MockwriteFlusher
type MockwriteFlusherMockRecorder struct {
	mock *MockwriteFlusher
}

// NewMockwriteFlusher creates a new mock instance
func NewMockwriteFlusher(ctrl *gomock.Controller) *MockwriteFlusher {
	mock := &MockwriteFlusher{ctrl: ctrl}
	mock.recorder = &MockwriteFlusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwriteFlusher) EXPECT() *MockwriteFlusherMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockwriteFlusher) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockwriteFlusherMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockwriteFlusher)(nil).Write), p)
}

// Flush mocks base method
func (m *MockwriteFlusher) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockwriteFlusherMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockwriteFlusher)(nil).Flush))
}
